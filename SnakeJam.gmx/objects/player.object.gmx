<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>circle_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp=0;
vsp=0;
maxsp=6;
fric=0.2;
haccel=0.5;
vaccel=0.5;

myplayer=1;
cooldown=1.5; //in seconds

child=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ds_queue_destroy(queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Nothing. Cooldown alarm.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.reset) {
  exit;
}

nobeams=true;
with (beam) {
  if (myplayer==other.myplayer) {
    other.nobeams=false;
    break;
  }
}
if (nobeams) { global.hit[myplayer]=false; }

if (myplayer==2) { image_blend=c_red; }
else if (myplayer==1) { image_blend=c_aqua; }

joyX=joystick_xpos(myplayer);
joyY=joystick_ypos(myplayer);

joyU=joystick_upos(myplayer);
joyR=joystick_rpos(myplayer);
beamThreshold=point_distance(0,0,joyU, joyR);

if (beamThreshold&gt;=0.5 &amp;&amp; alarm[0]&lt;=0) {
    alarm[0]=room_speed*cooldown;
    angle=point_direction(0,0,joyU,joyR);

    with (instance_create(x, y, beam)) {
        image_blend=other.image_blend;
        angle=other.angle;
        parent=other.id;
        x=parent.x+lengthdir_x(16, angle);
        y=parent.y+lengthdir_y(16, angle);
        image_angle=angle;
    }
}

hsp+=haccel*joyX;
hsp-=fric*sign(hsp);
if (abs(hsp)&lt;fric) { hsp=0; }

vsp+=vaccel*joyY;
vsp-=fric*sign(vsp);
if (abs(vsp)&lt;fric) { vsp=0; }

sp=point_distance(0,0,hsp,vsp);

tailPieces=0;
with (tail) {
  if (myplayer==other.myplayer) {
    other.tailPieces+=1;
  }
}

if (tailPieces&gt;0) { global.stocks[myplayer]=max(0, global.stocks[myplayer]); }

if (sp&gt;maxsp/(1+0.1*tailPieces)) {
  dir=point_direction(0,0,hsp,vsp);
  hsp=lengthdir_x(maxsp/(1+0.1*tailPieces), dir);
  vsp=lengthdir_y(maxsp/(1+0.1*tailPieces), dir);
}

x+=hsp;
y+=vsp;

x=median(16, room_width-16, x);
y=median(16, room_height-16, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (alarm[0]&gt;0) {
    endangle=90+360*(1-alarm[0]/(cooldown*room_speed));
    draw_arc(x,y,18, 90, endangle, 2, c_lime);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
